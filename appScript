// Настройки Firestore
const config = {
  "client_email": "firebase-adminsdk-fbsvc@dima-db764.iam.gserviceaccount.com",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC56NBEiIV3c5aB\nQEwWs+aiH9XBUjYBuGhvgnP/ghZdCEnheoBwov11UEdLdo6/vfxc7IqAXA/lVdJn\njEGmmM46DYOoGWephQarfqdte151+oM1/HKka6LZmfVPsbmYBaufoSRU3eN4TbAy\nlRqdS3gT8egrbTLbv3kDUNPE3GDxfXeRYRvvUfpFMwH4AHbn9yaZfKMH9KOUnTMA\nMCt01FJ4qGN+p/TytXKLitHy0YDixpO17ecAZdactrI7pDw+ELSrYBg4u75wLUxY\nmp+kENfrYqnTSxfns9rZBgOKQYMa9Jc1G3L9RvyNJdtetGD5jImZE5kyWPcagvO3\nsFYT4HCzAgMBAAECggEAAulHzaS3qB1EiyWAAN10Omi2NtJmzxsWcc5dHIyxymcO\nNucYP+tMmjvAUSxfnKuePbC56WaOxyrFKXEsVOcmPAl+QFxAmLUoMPiJKThaE2M4\nuZEzMUcsqyysTl2uD0qMVGri3JixmUP2n4+2StDXkLRkWmhn+DPBVjTmbroKTe3H\nKOTA8bDzPzWw/NlAYAoTkJlpO8cuxVaFFmxjnX52Gt9+ZKVuUIGec6fR8ijTyrdu\nTI4i1i0eTlYq3shX/0ok31+2I/VUzbAeNmOblgvy2ekC9MuFWq6GBarxcFQR8RGA\nZDLsgCpVWc/ke/05JT0YQMUPRtkTGezvNjXsRlAVcQKBgQDk5WMeF9HcMk8XGUx8\nSMEAFoXpzyetUHBHXWmgXLZuMGev182EGBm7hjw+QTDaOrMtuL8fn0kqEUsKX3oO\nnmP7xgCDe/GlDTuNpAU6vAigCr7LzD2jhAV9jBl1zAnfO9N05M0VrLjOo/GOIBYH\n/KwRGiicL4B/D6tqCqR2imEnYwKBgQDP7FtTFSdUl9UNz1uiKaNP50K1GbXOi0AQ\nKn5ONAykN1XL8BFXqWo15GG0FdKNWsoLNVL2JEXA9HUYzUT3INaTINhWKuKMfJ18\nK8s9KhzPIcQCfqrNrogCibNHiiZ/5zH0MxHy8hW1CEhdEoMRrwgXzN/rATvJ2LHP\nQz9/hmoacQKBgB6BK4pxJjiwQ7YSWw0dLQtz9PjJ8MG6PJxmKJOEh5N7w/W9TthR\n1ewV4aVyTq5msEZhnqb6NWfz0gpZ2wxjs3N0WdEsDXIvp0YjG8dOE+AwTmkemQBX\nsdufdi0qug4UDQRBEcvXrvFrC+AjCoyZ8dx9nffipL9KOU/yhyR9IKF9AoGBAKb+\nUircZoZOm9NHo3UOtBfMyYriZ17IAF/7gQ4WR8DsoH/3BDa/3ooCL2aP0Fevf26Z\nGVSPtWZP8GxHEQja2vu3+YjbULE8tM+x7L3nQNQrbl4ClfQ0JRDEv7TJhDpd2YUk\nL1pMjJqlWFlIMPTW+00CQyVgDEEFRWoNvMYTksxBAoGBAOGHPv0x9vMqYIfSnPaS\n7hlH2YuU/SCa5nYt8iNz5dKD1a9Jlxk8NVmA7GEjh18uRYa2aP6ZbKWzjtH1yN2u\n7UTdznZ2786tgUQ1z0ASAuTPoFS/P5YBbeEE2L6mB8+d3CXB7GSK20v72Y6ieDOV\n4Lp7deUuWQt3QaUZf5xGy9lE\n-----END PRIVATE KEY-----\n",
  "project_id": "dima-db764",
};

// Подключение библиотеки FirestoreApp
// Идентификатор библиотеки: 1VUSl4b1r1eoNcRWotZM3e87ygkxvXlv4Ne7Fin6b0tpo5fLaetGaxKt
const firestore = FirestoreApp.getFirestore(config.client_email, config.private_key, config.project_id);

// Основная функция для синхронизации данных
function myFunction() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    Logger.log("Запуск myFunction");
    updateCooksSheet(ss);
    updateWaitersSheet(ss);
    updateVotesSheet(ss);
    updateUnregisteredUsersSheet(ss); // Добавляем синхронизацию листа UnregisteredUsers
    Logger.log("myFunction успешно выполнен");
  } catch (error) {
    Logger.log("Ошибка в myFunction: " + error.stack);
  }
}

// Функция для удаления данных
function clearAllData() {
  try {
    const usersDocs = firestore.getDocuments("users");
    usersDocs.forEach(doc => firestore.deleteDocument(`users/${doc.id}`));

    const votesDocs = firestore.getDocuments("votes");
    votesDocs.forEach(doc => firestore.deleteDocument(`votes/${doc.id}`));

    const adminsDocs = firestore.getDocuments("admins");
    adminsDocs.forEach(doc => firestore.deleteDocument(`admins/${doc.id}`));

    const settingsDocs = firestore.getDocuments("settings");
    settingsDocs.forEach(doc => firestore.deleteDocument(`settings/${doc.id}`));

    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const cooksSheet = ss.getSheetByName("Cooks");
    const waitersSheet = ss.getSheetByName("Waiters");
    const votesSheet = ss.getSheetByName("Votes");
    const unregisteredSheet = ss.getSheetByName("UnregisteredUsers");

    if (cooksSheet) cooksSheet.clear();
    if (waitersSheet) waitersSheet.clear();
    if (votesSheet) votesSheet.clear();
    if (unregisteredSheet) unregisteredSheet.clear();

    if (cooksSheet) cooksSheet.getRange("A1:E1").setValues([["№", "Фамилия", "Имя", "Звезды", "Свиньи"]]);
    if (waitersSheet) waitersSheet.getRange("A1:E1").setValues([["№", "Фамилия", "Имя", "Звезды", "Свиньи"]]);
    if (votesSheet) votesSheet.getRange("A1:C1").setValues([["Повара", "Официанты", "Последнее обновление"]]);
    if (unregisteredSheet) unregisteredSheet.getRange("A1:C1").setValues([["Фамилия", "Имя", "Роль"]]);

    Logger.log("Все данные успешно удалены!");
  } catch (error) {
    Logger.log("Ошибка при удалении данных: " + error.stack);
  }
}

// Обновление листа с поварами
function updateCooksSheet(ss) {
  try {
    const sheet = ss.getSheetByName("Cooks");
    if (!sheet) throw new Error("Лист 'Cooks' не найден");
    sheet.clear();
    sheet.getRange("A1:E1").setValues([["№", "Фамилия", "Имя", "Звезды", "Свиньи"]]);

    const usersDocs = firestore.getDocuments("users");
    Logger.log("Получено документов users: " + usersDocs.length);
    if (usersDocs.length > 0) Logger.log("Пример документа: " + JSON.stringify(usersDocs[0]));

    const cooksDocs = usersDocs.filter(doc => 
      doc.fields?.role?.stringValue === "cook" && 
      doc.fields?.registered?.booleanValue === true
    );
    Logger.log("Отфильтровано поваров: " + cooksDocs.length);

    const votesDocs = firestore.getDocuments("votes");
    Logger.log("Получено голосов: " + votesDocs.length);

    let row = 2;
    cooksDocs.forEach((cook, index) => {
      const id = cook.fields.id.stringValue;
      const surname = cook.fields.surname?.stringValue || "Не указано";
      const name = cook.fields.name?.stringValue || "Не указано";
      const stars = votesDocs.filter(vote => vote.fields?.to?.stringValue === id && vote.fields?.type?.stringValue === "star").length;
      const pigs = votesDocs.filter(vote => vote.fields?.to?.stringValue === id && vote.fields?.type?.stringValue === "pig").length;
      
      Logger.log(`Добавление повара: ${surname} ${name}, звезды: ${stars}, свиньи: ${pigs}`);
      sheet.getRange(`A${row}:E${row}`).setValues([[index + 1, surname, name, stars, pigs]]);
      row++;
    });

    if (row === 2) Logger.log("Нет зарегистрированных поваров для добавления");
  } catch (error) {
    Logger.log("Ошибка в updateCooksSheet: " + error.stack);
  }
}

// Обновление листа с официантами
function updateWaitersSheet(ss) {
  try {
    const sheet = ss.getSheetByName("Waiters");
    if (!sheet) throw new Error("Лист 'Waiters' не найден");
    sheet.clear();
    sheet.getRange("A1:E1").setValues([["№", "Фамилия", "Имя", "Звезды", "Свиньи"]]);

    const usersDocs = firestore.getDocuments("users");
    Logger.log("Получено документов users: " + usersDocs.length);
    if (usersDocs.length > 0) Logger.log("Пример документа: " + JSON.stringify(usersDocs[0]));

    const waitersDocs = usersDocs.filter(doc => 
      doc.fields?.role?.stringValue === "waiter" && 
      doc.fields?.registered?.booleanValue === true
    );
    Logger.log("Отфильтровано официантов: " + waitersDocs.length);

    const votesDocs = firestore.getDocuments("votes");
    Logger.log("Получено голосов: " + votesDocs.length);

    let row = 2;
    waitersDocs.forEach((waiter, index) => {
      const id = waiter.fields.id.stringValue;
      const surname = waiter.fields.surname?.stringValue || "Не указано";
      const name = waiter.fields.name?.stringValue || "Не указано";
      const stars = votesDocs.filter(vote => vote.fields?.to?.stringValue === id && vote.fields?.type?.stringValue === "star").length;
      const pigs = votesDocs.filter(vote => vote.fields?.to?.stringValue === id && vote.fields?.type?.stringValue === "pig").length;
      
      Logger.log(`Добавление официанта: ${surname} ${name}, звезды: ${stars}, свиньи: ${pigs}`);
      sheet.getRange(`A${row}:E${row}`).setValues([[index + 1, surname, name, stars, pigs]]);
      row++;
    });

    if (row === 2) Logger.log("Нет зарегистрированных официантов для добавления");
  } catch (error) {
    Logger.log("Ошибка в updateWaitersSheet: " + error.stack);
  }
}

// Обновление листа с голосами
function updateVotesSheet(ss) {
  try {
    const sheet = ss.getSheetByName("Votes");
    if (!sheet) throw new Error("Лист 'Votes' не найден");
    sheet.clear();
    sheet.getRange("A1:C1").setValues([["Повара", "Официанты", "Последнее обновление"]]);

    const votesDocs = firestore.getDocuments("votes");
    const usersDocs = firestore.getDocuments("users");
    Logger.log("Получено голосов: " + votesDocs.length);
    Logger.log("Получено пользователей: " + usersDocs.length);

    const cooksVotes = {};
    const waitersVotes = {};

    votesDocs.forEach(vote => {
      const toUser = usersDocs.find(user => user.fields?.id?.stringValue === vote.fields?.to?.stringValue);
      if (!toUser) return;

      const fullName = `${toUser.fields?.surname?.stringValue || "Неизвестно"} ${toUser.fields?.name?.stringValue || "Неизвестно"}`;
      const voteType = vote.fields?.type?.stringValue === "star" ? "stars" : "pigs";
      const targetRole = vote.fields?.targetRole?.stringValue;

      if (targetRole === "cook") {
        cooksVotes[fullName] = cooksVotes[fullName] || { stars: 0, pigs: 0 };
        cooksVotes[fullName][voteType]++;
      } else if (targetRole === "waiter") {
        waitersVotes[fullName] = waitersVotes[fullName] || { stars: 0, pigs: 0 };
        waitersVotes[fullName][voteType]++;
      }
    });

    let row = 2;
    for (const [fullName, counts] of Object.entries(cooksVotes)) {
      sheet.getRange(`A${row}`).setValue(`${fullName}: ★${counts.stars || 0} 🐷${counts.pigs || 0}`);
      row++;
    }

    row = 2;
    for (const [fullName, counts] of Object.entries(waitersVotes)) {
      sheet.getRange(`B${row}`).setValue(`${fullName}: ★${counts.stars || 0} 🐷${counts.pigs || 0}`);
      row++;
    }

    sheet.getRange("C2").setValue(new Date().toLocaleString());

    if (Object.keys(cooksVotes).length === 0) Logger.log("Нет голосов за поваров");
    if (Object.keys(waitersVotes).length === 0) Logger.log("Нет голосов за официантов");
  } catch (error) {
    Logger.log("Ошибка в updateVotesSheet: " + error.stack);
  }
}

// Новая функция для обновления листа UnregisteredUsers
function updateUnregisteredUsersSheet(ss) {
  try {
    const sheet = ss.getSheetByName("UnregisteredUsers");
    if (!sheet) throw new Error("Лист 'UnregisteredUsers' не найден");
    sheet.clear();
    sheet.getRange("A1:C1").setValues([["Фамилия", "Имя", "Роль"]]);

    const usersDocs = firestore.getDocuments("users");
    Logger.log("Получено документов users: " + usersDocs.length);
    if (usersDocs.length > 0) Logger.log("Пример документа: " + JSON.stringify(usersDocs[0]));

    const unregisteredUsers = usersDocs.filter(doc => 
      doc.fields?.registered?.booleanValue === false
    );
    Logger.log("Отфильтровано незарегистрированных пользователей: " + unregisteredUsers.length);

    let row = 2;
    unregisteredUsers.forEach(user => {
      const surname = user.fields.surname?.stringValue || "Не указано";
      const name = user.fields.name?.stringValue || "Не указано";
      const role = user.fields.role?.stringValue || "Не указано";
      
      Logger.log(`Добавление незарегистрированного пользователя: ${surname} ${name}, роль: ${role}`);
      sheet.getRange(`A${row}:C${row}`).setValues([[surname, name, role]]);
      row++;
    });

    if (row === 2) Logger.log("Нет незарегистрированных пользователей для добавления");
  } catch (error) {
    Logger.log("Ошибка в updateUnregisteredUsersSheet: " + error.stack);
  }
}

// Функция создания триггера
function createTrigger() {
  try {
    ScriptApp.getProjectTriggers().forEach(trigger => ScriptApp.deleteTrigger(trigger));
    ScriptApp.newTrigger("myFunction")
      .timeBased()
      .everyMinutes(1)
      .create();
    Logger.log("Триггер успешно создан");
  } catch (error) {
    Logger.log("Ошибка при создании триггера: " + error.stack);
  }
}

// Функция для обработки входящих запросов (оставляем без изменений)
function doPost(e) {
  try {
    const data = JSON.parse(e.postData.contents);
    const action = data.action; // Действие: "add" или "remove"
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('UnregisteredUsers');
    
    if (action === 'add') {
      // Добавляем пользователя, если его ещё нет в списке
      const surname = data.surname;
      const name = data.name;
      const role = data.role;
      
      // Получаем все данные из листа
      const dataRange = sheet.getDataRange();
      const values = dataRange.getValues();
      
      // Проверяем, есть ли пользователь в списке
      let userExists = false;
      for (let i = 1; i < values.length; i++) { // Начинаем с 1, чтобы пропустить заголовок
        if (values[i][0] === surname && values[i][1] === name && values[i][2] === role) {
          userExists = true;
          break;
        }
      }
      
      if (!userExists) {
        sheet.appendRow([surname, name, role]);
      }
      
      return ContentService.createTextOutput(JSON.stringify({ status: 'success' }))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    if (action === 'remove') {
      // Удаляем пользователя из списка
      const surname = data.surname;
      const name = data.name;
      const role = data.role;
      
      const dataRange = sheet.getDataRange();
      const values = dataRange.getValues();
      
      // Ищем строку с пользователем
      for (let i = 1; i < values.length; i++) {
        if (values[i][0] === surname && values[i][1] === name && values[i][2] === role) {
          sheet.deleteRow(i + 1); // Удаляем строку (i + 1, так как индексация в Google Sheets начинается с 1)
          break;
        }
      }
      
      return ContentService.createTextOutput(JSON.stringify({ status: 'success' }))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: 'Invalid action' }))
      .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: error.message }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}
